* Notes
** Ray Tracing in a Weekend
*** PPM
    PPM stands for Portable Pixmap Format. It's a part of PNM (Portable Anymap
    Format). It's usually an intermediate format used for image work before
    converting to a more efficient format. It was meant to allow monochrome
    bitmaps to be transmitted in an email message as plain ASCII text.

    In ASCII, a PPM file starts with the ASCII text P3 and uses 24 bits for each
    pixel, although some readers support 48 bits per pixel. It can use linear,
    sRGB, or simplified gamma representation. Gamma correction is usually only
    useful for 8-bit formats.

   
    #+BEGIN_SRC 
    P3
    width height
    max value for each color

    row1 col1 ex. 255 0 0
    row1 col2
    ...        
    #+END_SRC

    This can look like:

    #+BEGIN_SRC 
    P3
    3 2
    255

    255 0 0
    0 255 0
    ...        
    #+END_SRC
    
    
    There is also the P6 format, which uses non-human readable values for the
    color values, also separated by whitespace.

    A key tradeoff is that there's no compression, and can take orders of
    magnitude more space than an equivalent PNG in the worst cases.
*** Vectors
    In many systems, colors are 4D, i.e. RGBA. This possibly includes extra
    code, such as locations, directions, and offsets. For the sake of keeping
    things simple while learning, it's OK to use just RGB.
*** Rays
    Rays, also known as half-lines, have an origin and a direction.

    #+BEGIN_SRC
    p(t) = A + t * B
    #+END_SRC

    Fundamentally, a ray tracer sends rays through pixels and compute what color
    is seen.
*** Dimensionality
    By convention, x is right, y is up, and z is out of the screen (in other
    words, as you go into the screen z decreases).
*** Spheres
    The 3D sphere equation is x*x + y*y + z*z = R*R. In vec3, this becomes
    dot((p-c), (p-c)) = R*R.

    To find out whether or not the ray touches the sphere, we check if there's a
    point of the ray s.t.

    dot((A + t*B - C), (A + t*B - C)) = R*R

    AKA

    t*t*dot(B,B) + 2*t*dot(B,A-C) + dot(A-C,A-C) - R*R = 0

    This is a quadratic equation! We can solve whether or not roots exist by
    using a discriminant.
